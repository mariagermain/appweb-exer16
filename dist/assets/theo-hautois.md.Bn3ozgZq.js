import{_ as e,c as s,o as a,a2 as t}from"./chunks/framework.CQ12TVIp.js";const g=JSON.parse('{"title":"Revue de code du TP01 de Théo Hautois","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"theo-hautois.md","filePath":"theo-hautois.md"}'),i={name:"theo-hautois.md"},n=t(`<h1 id="revue-de-code-du-tp01-de-theo-hautois" tabindex="-1">Revue de code du TP01 de Théo Hautois <a class="header-anchor" href="#revue-de-code-du-tp01-de-theo-hautois" aria-label="Permalink to &quot;Revue de code du TP01 de Théo Hautois&quot;">​</a></h1><p>Cette page documente son app SongPlayer</p><h2 id="le-code" tabindex="-1">Le code <a class="header-anchor" href="#le-code" aria-label="Permalink to &quot;Le code&quot;">​</a></h2><h3 id="gestion-des-props" tabindex="-1">Gestion des props: <a class="header-anchor" href="#gestion-des-props" aria-label="Permalink to &quot;Gestion des props:&quot;">​</a></h3><p>Très bonne, l&#39;utilisation d&#39;un type Song permet de bien partager l&#39;information entre les composants</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        currentMusic:{type:Song, required:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span></code></pre></div><h3 id="gestion-des-emit" tabindex="-1">Gestion des emit <a class="header-anchor" href="#gestion-des-emit" aria-label="Permalink to &quot;Gestion des emit&quot;">​</a></h3><p>Très bonne</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> emit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineEmits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;music-change&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error-api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><h3 id="classe-song-artist" tabindex="-1">Classe Song &amp; Artist <a class="header-anchor" href="#classe-song-artist" aria-label="Permalink to &quot;Classe Song &amp; Artist&quot;">​</a></h3><p>Très complète, pas seulement un type Song. Classe avec des attibuts. Même chose pour Artist.</p><h3 id="gestion-des-erreurs" tabindex="-1">Gestion des erreurs <a class="header-anchor" href="#gestion-des-erreurs" aria-label="Permalink to &quot;Gestion des erreurs&quot;">​</a></h3><p>Très bonne gestion des erreurs. Le style des messages ext vraiment très cool. Tous les cas sont couverts.</p><h3 id="autre" tabindex="-1">Autre <a class="header-anchor" href="#autre" aria-label="Permalink to &quot;Autre&quot;">​</a></h3><p>Pas de non pour le lecteur (index.html)</p>`,15),o=[n];function r(h,d,l,p,c,u){return a(),s("div",null,o)}const m=e(i,[["render",r]]);export{g as __pageData,m as default};
